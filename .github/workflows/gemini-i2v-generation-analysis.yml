name: Gemini Image-to-Video Generation & Analysis

on:
  workflow_dispatch:
    inputs:
      base_prompt:
        description: 'Âü∫Êú¨ÁîüÊàê„Éó„É≠„É≥„Éó„ÉàÔºà‰æãÔºöÁæé„Åó„ÅÑÊ°ú„ÅÆËä±„Å≥„Çâ„Å®Áå´„ÅåÈÅä„Å∂È¢®ÊôØÔºâ'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  setup-branch:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.setup.outputs.branch_name }}
      folder_name: ${{ steps.setup.outputs.folder_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup branch and folder
        id: setup
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="video-generation-${TIMESTAMP}"
          FOLDER_NAME="video-${TIMESTAMP}"
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git checkout -b ${BRANCH_NAME}
          mkdir -p ${FOLDER_NAME}/planning ${FOLDER_NAME}/images ${FOLDER_NAME}/videos ${FOLDER_NAME}/analysis
          
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "folder_name=${FOLDER_NAME}" >> $GITHUB_OUTPUT
          
      - name: Commit initial structure
        run: |
          touch ${{ steps.setup.outputs.folder_name }}/README.md
          git add .
          git commit -m "üé¨ Initialize video generation workflow"
          git push origin ${{ steps.setup.outputs.branch_name }}
          
      - name: Verify branch creation
        run: |
          echo "Created branch: ${{ steps.setup.outputs.branch_name }}"
          echo "Created folder: ${{ steps.setup.outputs.folder_name }}"
          git branch -v
          git remote -v
          
          # „É™„É¢„Éº„Éà„Éñ„É©„É≥„ÉÅ„ÅÆÁ¢∫Ë™ç
          echo "Checking remote branches:"
          git ls-remote --heads origin | grep "${{ steps.setup.outputs.branch_name }}" || echo "Branch not found on remote"

  planning:
    needs: setup-branch
    runs-on: ubuntu-latest
    outputs:
      image_prompt: ${{ steps.plan.outputs.image_prompt }}
      video_prompt: ${{ steps.plan.outputs.video_prompt }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch_name }}
          
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install google-generativeai
          
      - name: Plan generation strategy
        id: plan
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          mkdir -p ${{ needs.setup-branch.outputs.folder_name }}/planning
          
          python << 'EOF'
          import os
          import google.generativeai as genai
          
          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          model = genai.GenerativeModel('gemini-1.5-flash')
          
          base_prompt = """${{ github.event.inputs.base_prompt }}"""
          
          planning_prompt = f"""Âü∫Êú¨„Éó„É≠„É≥„Éó„Éà: {base_prompt}
          
          ‰ª•‰∏ã„ÅÆÂÜÖÂÆπ„ÅßÁîªÂÉèÁîüÊàê„Å®ÂãïÁîªÁîüÊàê„ÅÆ„Éó„É≠„É≥„Éó„Éà„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          1. ÁîªÂÉèÁîüÊàêÁî®„Éó„É≠„É≥„Éó„ÉàÔºàImagen4 FastÂêë„ÅëÔºâ:
          - ÈùôÁöÑ„Å™Áæé„Åó„Åï„ÄÅÊßãÂõ≥„ÄÅËâ≤ÂΩ©„ÄÅË≥™ÊÑü„ÇíÈáçË¶ñ
          - È´òÂìÅË≥™„Å™ÁîªÂÉèÁîüÊàê„Å´ÂøÖË¶Å„Å™Ë©≥Á¥∞„ÇíÂê´„ÇÅ„Çã
          - 1Ë°å„ÅßÁ∞°ÊΩî„Å´
          
          2. ÂãïÁîªÁîüÊàêÁî®„Éó„É≠„É≥„Éó„ÉàÔºàHailuo-02 ProÂêë„ÅëÔºâ:
          - Âãï„Åç„ÅÆË¶ÅÁ¥†„ÇíÂº∑Ë™ø
          - „Ç´„É°„É©„ÉØ„Éº„ÇØ„ÄÅ„É¢„Éº„Ç∑„Éß„É≥„ÄÅÊôÇÈñìÁöÑÂ§âÂåñ„ÇíÂê´„ÇÅ„Çã
          - 1Ë°å„ÅßÁ∞°ÊΩî„Å´
          
          3. Ë®àÁîªÊà¶Áï•:
          - „Å©„ÅÆ„Çà„ÅÜ„Å™Ë¶ñË¶öÁöÑË¶ÅÁ¥†„ÇíÈáçË¶ñ„Åô„Çã„Åã
          - ÊúüÂæÖ„Åï„Çå„ÇãÁµêÊûú
          
          ËøîÁ≠îÂΩ¢Âºè:
          IMAGE_PROMPT: [ÁîªÂÉèÁîüÊàêÁî®„Éó„É≠„É≥„Éó„Éà]
          VIDEO_PROMPT: [ÂãïÁîªÁîüÊàêÁî®„Éó„É≠„É≥„Éó„Éà]
          STRATEGY: [Ë®àÁîªÊà¶Áï•]
          """
          
          response = model.generate_content(planning_prompt)
          result = response.text
          
          # „Éë„Éº„ÇπÁµêÊûú
          lines = result.split('\n')
          image_prompt = ""
          video_prompt = ""
          strategy = []
          
          for line in lines:
              if line.startswith('IMAGE_PROMPT:'):
                  image_prompt = line.replace('IMAGE_PROMPT:', '').strip()
              elif line.startswith('VIDEO_PROMPT:'):
                  video_prompt = line.replace('VIDEO_PROMPT:', '').strip()
              elif line.startswith('STRATEGY:'):
                  strategy.append(line.replace('STRATEGY:', '').strip())
              elif strategy and line.strip():
                  strategy.append(line.strip())
          
          # „Éï„Ç°„Ç§„É´‰øùÂ≠ò
          folder = "${{ needs.setup-branch.outputs.folder_name }}/planning"
          
          with open(f"{folder}/image-prompt.md", "w", encoding="utf-8") as f:
              f.write(image_prompt)
          
          with open(f"{folder}/video-prompt.md", "w", encoding="utf-8") as f:
              f.write(video_prompt)
          
          with open(f"{folder}/planning-strategy.md", "w", encoding="utf-8") as f:
              f.write(f"# ÁîüÊàêË®àÁîªÊà¶Áï•\n\n")
              f.write(f"## Âü∫Êú¨„Éó„É≠„É≥„Éó„Éà\n{base_prompt}\n\n")
              f.write(f"## Êà¶Áï•\n")
              f.write('\n'.join(strategy))
          
          # GitHub Output„Å´Ë®≠ÂÆö
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"image_prompt={image_prompt}\n")
              f.write(f"video_prompt={video_prompt}\n")
          EOF
          
      - name: Commit planning results
        run: |
          git add .
          git commit -m "üìù Add generation planning"
          git push

  generate-image:
    needs: [setup-branch, planning]
    runs-on: ubuntu-latest
    outputs:
      image_url: ${{ steps.generate.outputs.image_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch_name }}
          
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: üé® ÁîªÂÉèÁîüÊàê„Ç®„Éº„Ç∏„Çß„É≥„Éà (Imagen4 Fast)
        id: generate
        uses: google-gemini/gemini-cli-action@main
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          settings_json: |
            {
              "mcpServers": {
                "t2i-fal-imagen4-fast": {
                  "httpUrl": "https://mcp-creatify-lipsync-20250719-010824-a071b7b8-820994673238.us-central1.run.app/t2i/fal/imagen4/fast",
                  "timeout": 300000
                }
              },
              "coreTools": ["ReadFileTool", "WriteFileTool", "EditFileTool", "ShellTool"]
            }
          prompt: |
            üì∏ **ÁîªÂÉèÁîüÊàê„Çø„Çπ„ÇØ - Imagen4 Fast**
            
            **„Éó„É≠„É≥„Éó„Éà**: ${{ needs.planning.outputs.image_prompt }}
            
            **„Çø„Çπ„ÇØ**:
            1. MCP„ÉÑ„Éº„É´ `mcp__t2i-fal-imagen4-fast` „Çí‰ΩøÁî®„Åó„Å¶ÁîªÂÉè„ÇíÁîüÊàê
               - prompt: "${{ needs.planning.outputs.image_prompt }}"
               - image_size: "landscape_16_9"
               - quality: "high"
            
            2. ÁîüÊàê„Åï„Çå„ÅüURL„Çí `${{ needs.setup-branch.outputs.folder_name }}/images/image-url.txt` „Å´‰øùÂ≠ò
            
            3. curl„ÅßÁîªÂÉè„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„ÄÅ`${{ needs.setup-branch.outputs.folder_name }}/images/generated-image.jpg` „Å´‰øùÂ≠ò
            
            **„Ç®„É©„ÉºÊôÇ**: „Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„ÉºÁîªÂÉè„Çí‰ΩúÊàê„Åó„ÄÅ„Ç®„É©„ÉºÊÉÖÂ†±„Çí `error.log` „Å´Ë®òÈå≤
          
      - name: Commit image
        run: |
          git add .
          git commit -m "üñºÔ∏è Add generated image"
          git push

  generate-video:
    needs: [setup-branch, planning, generate-image]
    runs-on: ubuntu-latest
    outputs:
      video_url: ${{ steps.generate.outputs.video_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch_name }}
          
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: üé¨ ÂãïÁîªÁîüÊàê„Ç®„Éº„Ç∏„Çß„É≥„Éà (Hailuo-02 Pro)
        id: generate
        uses: google-gemini/gemini-cli-action@main
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          settings_json: |
            {
              "mcpServers": {
                "i2v-fal-hailuo-02-pro": {
                  "httpUrl": "https://mcp-creatify-lipsync-20250719-010824-a071b7b8-820994673238.us-central1.run.app/i2v/fal/minimax/hailuo-02/pro",
                  "timeout": 600000
                }
              },
              "coreTools": ["ReadFileTool", "WriteFileTool", "EditFileTool", "ShellTool"]
            }
          prompt: |
            üé• **ÂãïÁîªÁîüÊàê„Çø„Çπ„ÇØ - Hailuo-02 Pro**
            
            **„Çø„Çπ„ÇØ**:
            1. ÁîªÂÉèURL„Çí `${{ needs.setup-branch.outputs.folder_name }}/images/image-url.txt` „Åã„ÇâË™≠„ÅøÂèñ„Çä
            
            2. MCP„ÉÑ„Éº„É´ `mcp__i2v-fal-hailuo-02-pro` „ÅßÂãïÁîªÁîüÊàê
               - image_url: Ë™≠„ÅøÂèñ„Å£„ÅüÁîªÂÉèURL
               - prompt: "${{ needs.planning.outputs.video_prompt }}"
               - duration: 6
               - resolution: "1080P"
               - prompt_optimizer: true
            
            3. ÁîüÊàê„Åï„Çå„ÅüURL„Çí `${{ needs.setup-branch.outputs.folder_name }}/videos/video-url.txt` „Å´‰øùÂ≠ò
            
            4. curl„ÅßÂãïÁîª„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„ÄÅ`${{ needs.setup-branch.outputs.folder_name }}/videos/generated-video.mp4` „Å´‰øùÂ≠ò
            
            **„Ç®„É©„ÉºÊôÇ**: „Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„ÉºÂãïÁîªURL„Çí‰øùÂ≠ò„Åó„ÄÅ„Ç®„É©„ÉºÊÉÖÂ†±„Çí `generation-error.txt` „Å´Ë®òÈå≤
            
            **Ê≥®ÊÑè**: ÂãïÁîªÁîüÊàê„Å´„ÅØÊôÇÈñì„Åå„Åã„Åã„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„Çø„Ç§„É†„Ç¢„Ç¶„Éà„ÅØ10ÂàÜ„ÅßË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ
          
      - name: Commit video
        run: |
          git add .
          git commit -m "üé• Add generated video"
          git push

  analyze-video:
    needs: [setup-branch, generate-video, planning]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch_name }}
          
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install google-generativeai
          
      - name: Analyze video
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          mkdir -p ${{ needs.setup-branch.outputs.folder_name }}/analysis
          
          python << 'EOF'
          import os
          import google.generativeai as genai
          
          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          model = genai.GenerativeModel('gemini-1.5-flash')
          
          video_url = """${{ needs.generate-video.outputs.video_url }}"""
          original_prompt = """${{ github.event.inputs.base_prompt }}"""
          video_prompt = """${{ needs.planning.outputs.video_prompt }}"""
          
          analysis_prompt = f"""ÂãïÁîªURL„ÇíÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ: {video_url}
          
          ÂÖÉ„ÅÆ„Éó„É≠„É≥„Éó„Éà: {original_prompt}
          ÂãïÁîªÁîüÊàê„Éó„É≠„É≥„Éó„Éà: {video_prompt}
          
          ‰ª•‰∏ã„ÅÆË¶≥ÁÇπ„ÅßË©≥Á¥∞„Å™ÂàÜÊûê„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          ## 1. ÊäÄË°ìÁöÑÂìÅË≥™
          - Ëß£ÂÉèÂ∫¶„Å®„ÇØ„É™„Ç¢„Åï
          - „Éï„É¨„Éº„É†„É¨„Éº„Éà
          - „Ç¢„Éº„ÉÜ„Ç£„Éï„Ç°„ÇØ„Éà„ÅÆÊúâÁÑ°
          
          ## 2. Ëä∏Ë°ìÁöÑÂìÅË≥™
          - ÊßãÂõ≥„Å®„Ç´„É°„É©„ÉØ„Éº„ÇØ
          - Ëâ≤ÂΩ©„Å®ÁÖßÊòé
          - ÂÖ®‰ΩìÁöÑ„Å™ÁæéÁöÑ‰æ°ÂÄ§
          
          ## 3. „É¢„Éº„Ç∑„Éß„É≥„Å®Âãï„Åç
          - Âãï„Åç„ÅÆËá™ÁÑ∂„Åï
          - Áâ©ÁêÜÊ≥ïÂâá„ÅÆÈÅµÂÆà
          - „Éà„É©„É≥„Ç∏„Ç∑„Éß„É≥„ÅÆÊªë„Çâ„Åã„Åï
          
          ## 4. „Éó„É≠„É≥„Éó„Éà„Å®„ÅÆ‰∏ÄËá¥Â∫¶
          - Ë¶ÅÊ±Ç„Åï„Çå„ÅüË¶ÅÁ¥†„ÅÆÂ≠òÂú®
          - ÂâµÈÄ†ÁöÑËß£Èáà„ÅÆÈÅ©Âàá„Åï
          - ÊúüÂæÖ„Å®„ÅÆ‰πñÈõ¢
          
          ## 5. ÊîπÂñÑÊèêÊ°à
          - „Çà„ÇäËâØ„ÅÑÁµêÊûú„ÅÆ„Åü„ÇÅ„ÅÆ„Éó„É≠„É≥„Éó„ÉàÊîπÂñÑÊ°à
          - ÊäÄË°ìÁöÑ„Å™Êé®Â•®‰∫ãÈ†Ö
          - Ê¨°ÂõûÁîüÊàêÊôÇ„ÅÆ„Ç¢„Éâ„Éê„Ç§„Çπ
          
          „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥ÂΩ¢Âºè„ÅßË©≥Á¥∞„Å™„É¨„Éù„Éº„Éà„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          """
          
          response = model.generate_content(analysis_prompt)
          analysis = response.text
          
          # ÂàÜÊûêÁµêÊûú„Çí‰øùÂ≠ò
          with open("${{ needs.setup-branch.outputs.folder_name }}/analysis/video-analysis.md", "w", encoding="utf-8") as f:
              f.write(f"# ÂãïÁîªÂàÜÊûê„É¨„Éù„Éº„Éà\n\n")
              f.write(f"**ÂãïÁîªURL**: {video_url}\n\n")
              f.write(f"**ÁîüÊàêÊó•ÊôÇ**: $(date)\n\n")
              f.write(f"---\n\n")
              f.write(analysis)
          EOF
          
      - name: Commit analysis
        run: |
          git add .
          git commit -m "üìä Add video analysis"
          git push

  create-summary:
    needs: [setup-branch, planning, generate-image, generate-video, analyze-video]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch_name }}
          
      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Create summary README
        run: |
          cat > ${{ needs.setup-branch.outputs.folder_name }}/README.md << 'EOF'
          # ÁîªÂÉè‚ÜíÂãïÁîªÁîüÊàêÁµêÊûú
          
          ## Ê¶ÇË¶Å
          - **Âü∫Êú¨„Éó„É≠„É≥„Éó„Éà**: ${{ github.event.inputs.base_prompt }}
          - **ÁîüÊàêÊó•ÊôÇ**: $(date '+%YÂπ¥%mÊúà%dÊó• %H:%M:%S')
          - **„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°åID**: ${{ github.run_id }}
          
          ## ÁîüÊàêÁµêÊûú
          
          ### ÁîªÂÉè
          ![Generated Image](images/generated-image.jpg)
          - [ÁîªÂÉèURL](images/image-url.txt)
          
          ### ÂãïÁîª
          - [ÁîüÊàê„Åï„Çå„ÅüÂãïÁîª„ÇíË¶ã„Çã](videos/generated-video.mp4)
          - [ÂãïÁîªURL](videos/video-url.txt)
          
          ## Ë©≥Á¥∞„Éâ„Ç≠„É•„É°„É≥„Éà
          
          - üìã [Ë®àÁîªÊà¶Áï•](planning/planning-strategy.md)
          - üé® [ÁîªÂÉèÁîüÊàê„Éó„É≠„É≥„Éó„Éà](planning/image-prompt.md)
          - üé¨ [ÂãïÁîªÁîüÊàê„Éó„É≠„É≥„Éó„Éà](planning/video-prompt.md)
          - üìä [ÂãïÁîªÂàÜÊûê„É¨„Éù„Éº„Éà](analysis/video-analysis.md)
          
          ## ‰ΩøÁî®ÊäÄË°ì
          
          - **ÁîªÂÉèÁîüÊàê**: Imagen4 Fast (via MCP Server)
          - **ÂãïÁîªÁîüÊàê**: Hailuo-02 Pro (via MCP Server)
          - **ÂàÜÊûê**: Gemini 1.5 Flash
          
          ---
          
          *„Åì„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅØAI„Å´„Çà„Å£„Å¶Ëá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü*
          EOF
          
      - name: Commit summary
        run: |
          git add .
          git commit -m "üìö Add workflow summary"
          git push

  create-pull-request:
    needs: [setup-branch, create-summary]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup-branch.outputs.branch_name }}
          
      - name: Debug branch information
        run: |
          echo "Current branch: $(git branch --show-current)"
          echo "Target branch: ${{ needs.setup-branch.outputs.branch_name }}"
          echo "Folder: ${{ needs.setup-branch.outputs.folder_name }}"
          git log --oneline -n 5
          ls -la ${{ needs.setup-branch.outputs.folder_name }}/ || echo "Folder not found"
          
      - name: Verify GitHub token and permissions
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Checking GitHub token..."
          if [ -z "$GH_TOKEN" ]; then
            echo "Error: No GitHub token found"
            exit 1
          fi
          echo "GitHub token is set (length: ${#GH_TOKEN})"
          
          # „Éà„Éº„ÇØ„É≥„ÅÆÁ®ÆÈ°û„ÇíÁ¢∫Ë™ç
          if [ -n "$PAT_TOKEN" ]; then
            echo "Using PAT_TOKEN for authentication"
          else
            echo "Using GITHUB_TOKEN for authentication"
            echo "Note: GITHUB_TOKEN may have limited PR creation permissions"
          fi
          
          # „É™„Éù„Ç∏„Éà„É™„Å∏„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÇíÁ¢∫Ë™ç
          gh repo view ${{ github.repository }} --json name,owner || echo "Repository access check failed"
          
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # PR„Éú„Éá„Ç£„Çí‰ΩúÊàê
          cat > pr_body.md << 'EOF'
          ## ÁîªÂÉè‚ÜíÂãïÁîªÁîüÊàê„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆå‰∫Ü
          
          ### ÁîüÊàêÂÜÖÂÆπ
          **Âü∫Êú¨„Éó„É≠„É≥„Éó„Éà**: ${{ github.event.inputs.base_prompt }}
          
          ### ÊàêÊûúÁâ©
          - üìÅ **„Éï„Ç©„É´„ÉÄ**: `${{ needs.setup-branch.outputs.folder_name }}/`
          - üñºÔ∏è **ÁîªÂÉè**: ÁîüÊàêÂÆå‰∫Ü
          - üé• **ÂãïÁîª**: ÁîüÊàêÂÆå‰∫Ü
          - üìä **ÂàÜÊûê**: ÂÆå‰∫Ü
          
          ### Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó
          1. ÁîüÊàêÁµêÊûú„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          2. ÂøÖË¶Å„Å´Âøú„Åò„Å¶ÂÜçÁîüÊàê„ÇíÊ§úË®é„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          3. Ê∫ÄË∂≥„Åß„Åç„ÇãÁµêÊûú„ÅÆÂ†¥Âêà„ÅØ„Éû„Éº„Ç∏„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          
          ---
          *„Åì„ÅÆPR„ÅØËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü*
          EOF
          
          # „Éó„É´„É™„ÇØ„Ç®„Çπ„Éà‰ΩúÊàê
          CURRENT_BRANCH=$(git branch --show-current)
          echo "Creating pull request from branch: $CURRENT_BRANCH to main"
          
          # Êó¢Â≠ò„ÅÆPR„Çí„ÉÅ„Çß„ÉÉ„ÇØ
          EXISTING_PR=$(gh pr list --head "$CURRENT_BRANCH" --json number --jq '.[0].number' 2>/dev/null || echo "")
          
          if [ -n "$EXISTING_PR" ] && [ "$EXISTING_PR" != "null" ]; then
            echo "Pull request already exists: #$EXISTING_PR"
            gh pr view "$EXISTING_PR"
          else
            echo "Creating new pull request..."
            gh pr create \
              --base main \
              --title "üé¨ ÁîªÂÉè‚ÜíÂãïÁîªÁîüÊàê: ${{ github.event.inputs.base_prompt }}" \
              --body-file pr_body.md \
              && echo "„Éó„É´„É™„ÇØ„Ç®„Çπ„Éà‰ΩúÊàêÊàêÂäüÔºÅ" \
              || {
                echo "„Éó„É´„É™„ÇØ„Ç®„Çπ„Éà‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
                echo "Debug information:"
                echo "Current branch: $CURRENT_BRANCH"
                echo "Repository: ${{ github.repository }}"
                echo "Base branch: main" 
                gh pr list --limit 5 2>/dev/null || echo "PR list failed"
                exit 1
              }
          fi
          
          # PR URL „ÇíË°®Á§∫
          echo "‰ΩúÊàê„Åï„Çå„Åü„Éó„É´„É™„ÇØ„Ç®„Çπ„Éà:"
          gh pr list --head $(git branch --show-current)